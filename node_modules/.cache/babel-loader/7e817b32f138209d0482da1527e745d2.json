{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\C7-Fron3\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, useReducer } from \"react\";\nimport { useState } from \"react\";\nimport { createContext, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContextGlobal = /*#__PURE__*/createContext(); //export const initialState = {theme: \"\", data: []}\n\nconst themes = {\n  dark: {\n    theme: false,\n    bgColor: 'black',\n    color: 'white',\n    icon: \"ðŸŒž\"\n  },\n  light: {\n    theme: true,\n    bgColor: 'white',\n    color: 'black',\n    icon: \"ðŸŒ™\"\n  }\n};\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const initialThemeState = themes.light;\n\n  const themeReducer = (state, action) => {\n    switch (action.type) {\n      case 'SWITCH_DARK':\n        return themes.dark;\n\n      case 'SWITCH_LIGHT':\n        return themes.light;\n\n      default:\n        throw new Error();\n    }\n  }; //Aqui deberan implementar la logica propia del Context.\n\n\n  const [themeState, setDispatch] = useReducer(themeReducer, initialThemeState);\n  const [dentists, setDentists] = useState([{}]);\n  const url = \"https://jsonplaceholder.typicode.com/users\";\n  useEffect(() => {\n    fetch(url).then(response => response.json()).then(data => setDentists(data));\n  }, []); //console.log(dentists)\n\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      dentists,\n      setDentists,\n      themeState,\n      setDispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"vav5nAv4RqJIoib7h51Z7snAvm8=\");\n\n_c = ContextProvider;\nexport const useContextGlobal = () => {\n  _s2();\n\n  return useContext(ContextGlobal);\n};\n\n_s2(useContextGlobal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["useContext","useReducer","useState","createContext","useEffect","ContextGlobal","themes","dark","theme","bgColor","color","icon","light","ContextProvider","children","initialThemeState","themeReducer","state","action","type","Error","themeState","setDispatch","dentists","setDentists","url","fetch","then","response","json","data","useContextGlobal"],"sources":["C:/Users/Dell/C7-Fron3/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { useContext, useReducer } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { createContext, useEffect } from \"react\";\r\n\r\n\r\nconst ContextGlobal = createContext();\r\n\r\n//export const initialState = {theme: \"\", data: []}\r\nconst themes = {\r\n  dark: {\r\n      theme: false,\r\n      bgColor: 'black',\r\n      color: 'white',\r\n      icon:  \"ðŸŒž\"\r\n  },\r\n  light: {\r\n      theme: true,\r\n      bgColor: 'white',\r\n      color: 'black',\r\n      icon: \"ðŸŒ™\"\r\n  }\r\n}\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n\r\n  const initialThemeState = themes.light\r\n\r\nconst themeReducer = (state, action) => {\r\n  switch(action.type){\r\n      case 'SWITCH_DARK':\r\n          return themes.dark\r\n      case 'SWITCH_LIGHT':\r\n          return themes.light\r\n      default:\r\n          throw new Error\r\n  }\r\n}\r\n  //Aqui deberan implementar la logica propia del Context.\r\n  const [themeState, setDispatch] = useReducer(themeReducer, initialThemeState)\r\n  const [dentists, setDentists] = useState([{}])\r\n  \r\n\r\n  const url = \"https://jsonplaceholder.typicode.com/users\"\r\n  \r\n  useEffect(() =>{\r\n    fetch(url)\r\n    .then(response => response.json())\r\n    .then(data => setDentists(data))\r\n  }, [])\r\n\r\n  //console.log(dentists)\r\n  \r\n\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{dentists, setDentists, themeState, setDispatch}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\nexport const useContextGlobal = () => useContext(ContextGlobal)\r\n"],"mappings":";;;;AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,OAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,OAAzC;;AAGA,MAAMC,aAAa,gBAAGF,aAAa,EAAnC,C,CAEA;;AACA,MAAMG,MAAM,GAAG;EACbC,IAAI,EAAE;IACFC,KAAK,EAAE,KADL;IAEFC,OAAO,EAAE,OAFP;IAGFC,KAAK,EAAE,OAHL;IAIFC,IAAI,EAAG;EAJL,CADO;EAObC,KAAK,EAAE;IACHJ,KAAK,EAAE,IADJ;IAEHC,OAAO,EAAE,OAFN;IAGHC,KAAK,EAAE,OAHJ;IAIHC,IAAI,EAAE;EAJH;AAPM,CAAf;AAeA,OAAO,MAAME,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAE/C,MAAMC,iBAAiB,GAAGT,MAAM,CAACM,KAAjC;;EAEF,MAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;IACtC,QAAOA,MAAM,CAACC,IAAd;MACI,KAAK,aAAL;QACI,OAAOb,MAAM,CAACC,IAAd;;MACJ,KAAK,cAAL;QACI,OAAOD,MAAM,CAACM,KAAd;;MACJ;QACI,MAAM,IAAIQ,KAAJ,EAAN;IANR;EAQD,CATD,CAJiD,CAc/C;;;EACA,MAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BrB,UAAU,CAACe,YAAD,EAAeD,iBAAf,CAA5C;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAxC;EAGA,MAAMuB,GAAG,GAAG,4CAAZ;EAEArB,SAAS,CAAC,MAAK;IACbsB,KAAK,CAACD,GAAD,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIN,WAAW,CAACM,IAAD,CAFzB;EAGD,CAJQ,EAIN,EAJM,CAAT,CArB+C,CA2B/C;;EAIA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACP,QAAD;MAAWC,WAAX;MAAwBH,UAAxB;MAAoCC;IAApC,CAA/B;IAAA,UACGR;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CApCM;;GAAMD,e;;KAAAA,e;AAsCb,OAAO,MAAMkB,gBAAgB,GAAG;EAAA;;EAAA,OAAM/B,UAAU,CAACK,aAAD,CAAhB;AAAA,CAAzB;;IAAM0B,gB"},"metadata":{},"sourceType":"module"}